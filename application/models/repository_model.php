<?phpclass repository_model extends CI_Model{    function __construct()    {        // Call the Model constructor        parent::__construct();        $this->load->database();    }		 /*     * Insert details of the paper and author     */    public function insertDetails($title, $name, $cwid, $email, $date)    {        $sql = "INSERT INTO repository(name, cwid, title, email, uploaddate,updatedate) values ('$title', '$name', '$cwid', '$email','$date','$date');";		$this->db->simple_query($sql, array($title, $name, $cwid,$email, $date));		if ($this->db->affected_rows() > 0) {            return $this->db->insert_id();		} else {			return 0;		}    }    public function updateLink($link, $paperId){        $this ->db ->trans_start();        $sql = "UPDATE repository set url = '$link' WHERE  paperid= '$paperId'";        $this->db->query($sql);        if ($this->db->affected_rows() > 0) {            return 1;        }else{            return $this->db->_error_message() . print_r("");        }    }    public function getPaperDetails($id){        $sql = "SELECT repository.title, repository.updatedate , repository.name, repository.url FROM repository WHERE repository.paperid = $id";        $results = $this->db->query($sql);        return $results->result();    }	public function getPaperTags($id){        $sql = "SELECT  tags.tag FROM repository INNER JOIN papertags ON repository.paperid = papertags.paperid INNER JOIN tags ON papertags.tid = tags.tid WHERE repository.paperid = $id";        $results = $this->db->query($sql);        return $results->result();    }	public function getTags()	{		$sql = "SELECT tid, tag FROM tags";		$results = $this->db->query($sql);		return $results->result();	}			public function getKeywords()	{		$sql = "SELECT * FROM [keywords]";		$results = $this->db->query($sql);		return $results->result();	}			 public function addATag($tagname)    {        if($tagname!= null) {            $sql = "INSERT INTO tags(tag) Values ('$tagname');";            $this->db->simple_query($sql, array($tagname));            if ($this->db->affected_rows() > 0) {                return 1;            } else {                return 0;            }        }    }    public function mapTag($paperId,$tag){        $this ->db ->trans_start();            $sql = "Insert Into papertags(paperid, tid) VALUES ('$paperId',$tag)";            $this->db->simple_query($sql, array($paperId,$tag));            if ($this->db->affected_rows() > 0) {                return 1;            }else{                if($this->db->trans_status() === false) {                    $this->db->trans_rollback();                    return 0;            }        }        $this ->db ->trans_commit();    }	 public function verifyTag($tagname)    {        $tagid = 0;		$this->db->select('tid');		$this->db->from('tags');		$this->db->where('tag', $tagname);		$query = $this->db->get();		foreach ($query->result() as $row) {			$tagid = $row->tid;		}		return $tagid;    }        public function searchByTag($searchTerm)    {    	$sql = "SELECT repository.title as 'title', repository.paperid as 'id', repository.url as 'url', repository.name as 'name',repository.updatedate as 'date' FROM repository INNER JOIN papertags ON repository.paperid = papertags.paperid INNER JOIN tags ON papertags.tid = tags.tid WHERE tags.tag = '" . $searchTerm ."'";       // $sql ="SELECT repository.title as 'title', repository.url as 'url', repository.name as 'name', tags.tag as 'tag' FROM repository INNER JOIN papertags ON repository.paperid = papertags.paperid INNER JOIN tags ON papertags.tid = tags.tid WHERE repository.title LIKE ''%'.$searchTerm.'%''";      //  $sql = "Select keywords.id from keywords where keywords='".$searchTerm."'";        $results = $this -> db -> query($sql);		return $results -> result();    }    public function searchByPaper($searchTerm){        $sql ="SELECT repository.title as 'title',repository.paperid as 'id', repository.url as 'url', repository.name as 'name' , repository.updatedate as 'date' From repository WHERE repository.title LIKE '%$searchTerm%'";        $results = $this -> db -> query($sql);        return $results -> result();    }    public function searchKeywords($searchTerm){        $sql = "Select keywords.type as 'type' from keywords where keywords='".$searchTerm."'";        $results = $this -> db -> query($sql);        return $results -> result();    }    public function searchByName($searchTerm){        $sql ="SELECT repository.title as 'title',repository.paperid as 'id', repository.url as 'url', repository.name as 'name' , repository.updatedate as 'date' FROM repository Where repository.name LIKE '%$searchTerm%'";        $results = $this -> db -> query($sql);        return $results -> result();    }}	?>